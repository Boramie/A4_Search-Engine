import java.util.ArrayList;
import java.util.HashMap;

public class Sorting {

	/*
	 * This method takes as input an HashMap with values that are Comparable. 
	 * It returns an ArrayList containing all the keys from the map, ordered 
	 * in descending order based on the values they mapped to. 
	 * 
	 * The time complexity for this method is O(n^2) as it uses bubble sort, where n is the number 
	 * of pairs in the map. 
	 */
    public static <K, V extends Comparable<V>> ArrayList<K> slowSort (HashMap<K, V> results) {
        ArrayList<K> sortedUrls = new ArrayList<K>();
        sortedUrls.addAll(results.keySet());	//Start with unsorted list of urls

        int N = sortedUrls.size();
        for(int i=0; i<N-1; i++){
			for(int j=0; j<N-i-1; j++){
				if(results.get(sortedUrls.get(j)).compareTo(results.get(sortedUrls.get(j+1))) < 0){
					K temp = sortedUrls.get(j);
					sortedUrls.set(j, sortedUrls.get(j+1));
					sortedUrls.set(j+1, temp);					
				}
			}
        }
        return sortedUrls;                    
    }

	/*
	 * This method takes as input an HashMap with values that are Comparable. 
	 * It returns an ArrayList containing all the keys from the map, ordered 
	 * in descending order based on the values they mapped to. 
	 * 
	 * The time complexity for this method is O(n*log(n)), where n is the number 
	 * of pairs in the map. 
	 */
    public static <K, V extends Comparable<V>> ArrayList<K> fastSort (HashMap<K, V> results) {
        // list of urls
        ArrayList<K> sortedUrls = new ArrayList<>(results.keySet());

        return mergeSort(results, sortedUrls);
    }

	/*
	Helper method merge sorting lists.
	 */
	private static <K, V extends Comparable<V>> ArrayList<K> mergeSort (HashMap<K, V> map, ArrayList<K> list) {
		if (list.size() <= 1) { // base case
			return list;
		}

		// partition
		else {
			int mid = (list.size() - 1) / 2;
			ArrayList<K> list1 = new ArrayList<>(list.size() / 2);
			for (int i = 0; i <= mid; i++) {
				list1.add(list.get(i));
			}

			ArrayList<K> list2 = new ArrayList<>(list.size() - list1.size());
			for (int i = mid + 1; i < list.size(); i++) {
				list2.add(list.get(i));
			}

			// recursive sort
			list1 = mergeSort(map, list1);
			list2 = mergeSort(map, list2);
			return merge(map, list1, list2); // merge lists
		}
	}

	/*
    Helper method merging lists.
     */
	private static <K, V extends Comparable<V>> ArrayList<K> merge (HashMap<K, V> map, ArrayList<K> list1, ArrayList<K> list2) {
		ArrayList<K> list = new ArrayList<>(list1.size() + list2.size());
		int i = 0;
		int j = 0;

		// add elements until empty
		while (i < list1.size() && j < list2.size()) {
			V element1 = (V) map.get(list1.get(i));
			V element2 = (V) map.get(list2.get(j));
			if (element1.compareTo(element2) > 0) { // element1 > element2
				list.add(list1.get(i)); // add element2
				i++;
			}
			else {
				list.add(list2.get(j));
				j++;
			}
		}

		// add remaining elements
		while (i < list1.size()) {
			list.add(list1.get(i));
			i++;
		}

		while (j < list2.size()) {
			list.add(list2.get(j));
			j++;
		}

		return list;
	}
}
